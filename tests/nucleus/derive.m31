rule A type ;;
rule a : A ;;
rule B (x : A) (y : A) type ;;
rule s (x : A) : B x x ;;

let d = der (x : A) -> B x x ;;

d a ;;

{z : A} d z ;;

let d' = der (x : A) -> B a x ;;

d' a ;;

rule refl (X type) (x : X) (y : X) : x == y : X ;;

let e = der (x : A) -> refl (B x x) (s x) (s x) ;;

{a : A} e a ;;

let f =
  der (a : A) (b : A) ->
    let g = der (y : A) (u : B a a) -> B a y in
    g b (s a)
;;

{u v : A} f u v ;;